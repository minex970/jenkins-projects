// CI pipeline for monitoring application...
pipeline {
    agent any

    // we need to define the tools as we are using them in the stages...
    tools {
        // tool's name
        jdk 'jdk17'
    }

    environment {
        // environment variable required in the stages...
        SCANNER_HOME= tool 'sonarqube-scanner'
        DOCKER_IMAGE_NAME='minex970/monitoring'
    }

    stages {
        // fetch the latest code for the development...
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/Python-Webapp'
            }
        }

        // code quality check...
        stage('Sonarqube analysis') {
            steps {
                // name of the sonarqube server...
                withSonarQubeEnv('sonarqube-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=monitoring \
                -Dsonar.projectKey=monitoring '''
                }
            }
        }

        // security analysis...
        stage('Dependency check') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./' , odcInstallation: 'dp-check' // tool's name
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        // file-system scanning using trivy
        stage('Trivy filesystem scan') {
            steps {
                sh "trivy fs ."
            }
        }

        // build docker image...
        stage('Build image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        // using makefile to build images.
                        sh "make image IMAGE_REPO='$DOCKER_IMAGE_NAME'"
                    }
                }
            }
        }

        // Scanning image using trivy...
        stage('Trivy image scanner') {
            steps {
                retry(3) {
                    sh "trivy image ${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }

        // push docker image...
        stage('Push image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        // using makefile to push images.
                        sh "make push IMAGE_REPO='$DOCKER_IMAGE_NAME'"
                    }
                }
            }
        }

        // trigger CD pipeline...
        stage('Trigger CD pipeline') {
            steps {
                build job: "Monitoring-CD-pipeline"
            }
        }
    }
}
